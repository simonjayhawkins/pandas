name: CI

on:
  push:
    branches: master
  pull_request:
    branches: master

env:
  ENV_FILE: environment.yml

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-latest
    steps:

    - name: Setting conda path
      run: echo "::add-path::${HOME}/miniconda3/bin"

    - name: Checkout
      uses: actions/checkout@v1

    - name: Looking for unwanted patterns
      run: ci/code_checks.sh patterns
      if: always()

    - name: Setup environment and build pandas
      run: ci/setup_env.sh
      if: always()

    - name: Linting
      run: |
        source activate pandas-dev
        ci/code_checks.sh lint
      if: always()

    - name: Dependencies consistency
      run: |
        source activate pandas-dev
        ci/code_checks.sh dependencies
      if: always()

    - name: Checks on imported code
      run: |
        source activate pandas-dev
        ci/code_checks.sh code
      if: always()

    - name: Running doctests
      run: |
        source activate pandas-dev
        ci/code_checks.sh doctests
      if: always()

    - name: Docstring validation
      run: |
        source activate pandas-dev
        ci/code_checks.sh docstrings
      if: always()

    - name: Typing validation
      run: |
        source activate pandas-dev
        ci/code_checks.sh typing
      if: always()

    - name: Testing docstring validation script
      run: |
        source activate pandas-dev
        pytest --capture=no --strict scripts
      if: always()

    - name: Running benchmarks
      run: |
        source activate pandas-dev
        cd asv_bench
        asv check -E existing
        git remote add upstream https://github.com/pandas-dev/pandas.git
        git fetch upstream
        if git diff upstream/master --name-only | grep -q "^asv_bench/"; then
            asv machine --yes
            asv dev | sed "/failed$/ s/^/##[error]/" | tee benchmarks.log
            if grep "failed" benchmarks.log > /dev/null ; then
                exit 1
            fi
        else
            echo "Benchmarks did not run, no changes detected"
        fi
      if: always()

    - name: Publish benchmarks artifact
      uses: actions/upload-artifact@master
      with:
        name: Benchmarks log
        path: asv_bench/benchmarks.log
      if: failure()

  web_and_docs:
    name: Web and docs
    runs-on: ubuntu-latest
    steps:

    - name: Setting conda path
      run: echo "::set-env name=PATH::${HOME}/miniconda3/bin:${PATH}"

    - name: Checkout
      uses: actions/checkout@v1

    - name: Setup environment and build pandas
      run: ci/setup_env.sh

    - name: Build website
      run: |
        source activate pandas-dev
        python web/pandas_web.py web/pandas --target-path=web/build

    - name: Build documentation
      run: |
        source activate pandas-dev
        doc/make.py --warnings-are-errors | tee sphinx.log ; exit ${PIPESTATUS[0]}

    # This can be removed when the ipython directive fails when there are errors,
    # including the `tee sphinx.log` in te previous step (https://github.com/ipython/ipython/issues/11547)
    - name: Check ipython directive errors
      run: "! grep -B1 \"^<<<-------------------------------------------------------------------------$\" sphinx.log"

    - name: Merge website and docs
      run: |
        mkdir -p pandas_web/docs
        cp -r web/build/* pandas_web/
        cp -r doc/build/html/* pandas_web/docs/
      if: github.event_name == 'push'

    - name: Install Rclone
      run: sudo apt install rclone -y
      if: github.event_name == 'push'

    - name: Set up Rclone
      run: |
        RCLONE_CONFIG_PATH=$HOME/.config/rclone/rclone.conf
        mkdir -p `dirname $RCLONE_CONFIG_PATH`
        echo "[ovh_cloud_pandas_web]" > $RCLONE_CONFIG_PATH
        echo "type = swift" >> $RCLONE_CONFIG_PATH
        echo "env_auth = false" >> $RCLONE_CONFIG_PATH
        echo "auth_version = 3" >> $RCLONE_CONFIG_PATH
        echo "auth = https://auth.cloud.ovh.net/v3/" >> $RCLONE_CONFIG_PATH
        echo "endpoint_type = public" >> $RCLONE_CONFIG_PATH
        echo "tenant_domain = default" >> $RCLONE_CONFIG_PATH
        echo "tenant = 2977553886518025" >> $RCLONE_CONFIG_PATH
        echo "domain = default" >> $RCLONE_CONFIG_PATH
        echo "user = w4KGs3pmDxpd" >> $RCLONE_CONFIG_PATH
        echo "key = ${{ secrets.ovh_object_store_key }}" >> $RCLONE_CONFIG_PATH
        echo "region = BHS" >> $RCLONE_CONFIG_PATH
      if: github.event_name == 'push'

    - name: Sync web with OVH
      run: rclone sync pandas_web ovh_cloud_pandas_web:dev
      if: github.event_name == 'push'

    - name: Create git repo to upload the built docs to GitHub pages
      run: |
        cd pandas_web
        git init
        touch .nojekyll
        echo "dev.pandas.io" > CNAME
        printf "User-agent: *\nDisallow: /" > robots.txt
        git add --all .
        git config user.email "pandas-dev@python.org"
        git config user.name "pandas-bot"
        git commit -m "pandas web and documentation in master"
      if: github.event_name == 'push'

    # For this task to work, next steps are required:
    # 1. Generate a pair of private/public keys (i.e. `ssh-keygen -t rsa -b 4096 -C "your_email@example.com"`)
    # 2. Go to https://github.com/pandas-dev/pandas/settings/secrets
    # 3. Click on "Add a new secret"
    # 4. Name: "github_pagas_ssh_key", Value: <Content of the private ssh key>
    # 5. The public key needs to be upladed to https://github.com/pandas-dev/pandas-dev.github.io/settings/keys
    - name: Install GitHub pages ssh deployment key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.github_pages_ssh_key }}
        known_hosts: 'github.com,192.30.252.128 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
      if: github.event_name == 'push'

    - name: Publish web and docs to GitHub pages
      run: |
        cd pandas_web
        git remote add origin git@github.com:pandas-dev/pandas-dev.github.io.git
        git push -f origin master || true
      if: github.event_name == 'push'
