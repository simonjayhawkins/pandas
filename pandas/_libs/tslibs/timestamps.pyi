# flake8: noqa

from typing import Any

class RoundTo:
    @property
    def MINUS_INFTY(self) -> int: ...
    @property
    def PLUS_INFTY(self) -> int: ...
    @property
    def NEAREST_HALF_EVEN(self) -> int: ...
    @property
    def NEAREST_HALF_PLUS_INFTY(self) -> int: ...
    @property
    def NEAREST_HALF_MINUS_INFTY(self) -> int: ...

def round_nsint64(values, mode, freq): ...

class Timestamp:
    value: Any = ...
    freq: Any = ...
    tzinfo: Any = ...
    min: Any = ...
    max: Any = ...
    weekofyear: Any = ...
    daysinmonth: Any = ...
    astimezone: Any = ...
    def fromordinal(cls, ordinal, freq=..., tz=...): ...
    def now(cls, tz=...): ...
    def today(cls, tz=...): ...
    def utcnow(cls): ...
    def utcfromtimestamp(cls, ts): ...
    def fromtimestamp(cls, ts): ...
    def strptime(cls, date_string, format): ...
    def combine(cls, date, time): ...
    def __new__(
        cls,
        ts_input=...,
        freq=...,
        tz=...,
        unit=...,
        year=...,
        month=...,
        day=...,
        hour=...,
        minute=...,
        second=...,
        microsecond=...,
        nanosecond=...,
        tzinfo=...,
    ): ...
    def round(self, freq, ambiguous=..., nonexistent=...): ...
    def floor(self, freq, ambiguous=..., nonexistent=...): ...
    def ceil(self, freq, ambiguous=..., nonexistent=...): ...
    @property
    def tz(self): ...
    @tz.setter
    def tz(self, value): ...
    def to_period(self, freq=...): ...
    @property
    def dayofweek(self): ...
    def day_name(self, locale=...): ...
    def month_name(self, locale=...): ...
    @property
    def weekday_name(self): ...
    @property
    def dayofyear(self): ...
    @property
    def week(self): ...
    @property
    def quarter(self): ...
    @property
    def days_in_month(self): ...
    @property
    def freqstr(self): ...
    @property
    def is_month_start(self): ...
    @property
    def is_month_end(self): ...
    @property
    def is_quarter_start(self): ...
    @property
    def is_quarter_end(self): ...
    @property
    def is_year_start(self): ...
    @property
    def is_year_end(self): ...
    @property
    def is_leap_year(self): ...
    @property
    def resolution(self): ...
    def tz_localize(self, tz, ambiguous=..., nonexistent=..., errors=...): ...
    def tz_convert(self, tz): ...
    def replace(
        self,
        year=...,
        month=...,
        day=...,
        hour=...,
        minute=...,
        second=...,
        microsecond=...,
        nanosecond=...,
        tzinfo=...,
        fold=...,
    ): ...
    def isoformat(self, sep=...): ...
    def to_julian_date(self): ...
    def normalize(self): ...
